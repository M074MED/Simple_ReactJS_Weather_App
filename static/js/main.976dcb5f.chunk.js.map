{"version":3,"sources":["components/form.js","components/weather.js","App.js","reportWebVitals.js","index.js"],"names":["Form","props","onSubmit","gitWeather","type","name","placeholder","Weather","className","city","country","temperature","humidity","description","error","API_KEY","App","state","gw","e","a","preventDefault","target","elements","value","fetch","api","json","api_data","setState","sys","main","temp","weather","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PAYeA,EAVF,SAACC,GACV,OACI,uBAAMC,SAAUD,EAAME,WAAtB,UACI,uBAAOC,KAAK,OAAOC,KAAK,UAAUC,YAAY,eAC9C,uBAAOF,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAC3C,qDCOGC,EAZC,SAACN,GACb,OACI,sBAAKO,UAAU,OAAf,UACKP,EAAMQ,MAAQ,2CAAcR,EAAMQ,KAApB,KAA4BR,EAAMS,WAChDT,EAAMU,aAAe,8CAAiBV,EAAMU,YAAvB,OACrBV,EAAMW,UAAY,2CAAcX,EAAMW,SAApB,OAClBX,EAAMY,aAAe,8CAAiBZ,EAAMY,eAC5CZ,EAAMa,OAAS,wCAAWb,EAAMa,aCLvCC,EAAU,mCACVC,E,4MAEJC,MAAQ,CACNP,QAAS,GACTD,KAAM,GACNE,YAAa,GACbC,SAAU,GACVC,YAAa,GACbC,MAAO,I,EAGTI,G,uCAAK,WAAOC,GAAP,qBAAAC,EAAA,6DACHD,EAAEE,iBACIX,EAAUS,EAAEG,OAAOC,SAASb,QAAQc,MACpCf,EAAOU,EAAEG,OAAOC,SAASd,KAAKe,MAHjC,SAIeC,MAAM,oDAAD,OAAqDhB,EAArD,cAA+DC,EAA/D,kBAAgFK,IAJpG,cAIGW,EAJH,gBAKoBA,EAAIC,OALxB,OAKGC,EALH,OAMCnB,GAAQC,EACV,EAAKmB,SAAS,CACZnB,QAASkB,EAASE,IAAIpB,QACtBD,KAAMmB,EAASvB,KACfM,YAAaiB,EAASG,KAAKC,KAC3BpB,SAAUgB,EAASG,KAAKnB,SACxBC,YAAae,EAASK,QAAQ,GAAGpB,YACjCC,MAAO,KAGT,EAAKe,SAAS,CACZnB,QAAS,GACTD,KAAM,GACNE,YAAa,GACbC,SAAU,GACVC,YAAa,GACbC,MAAO,iCAtBR,4C,kGA2BL,WACE,OACE,qBAAKN,UAAU,MAAf,SACA,sBAAKA,UAAU,YAAf,UACI,cAAC,EAAD,CAAML,WAAY+B,KAAKhB,KACvB,cAAC,EAAD,CACER,QAAUwB,KAAKjB,MAAMP,QACrBD,KAAOyB,KAAKjB,MAAMR,KAClBE,YAAcuB,KAAKjB,MAAMN,YACzBC,SAAWsB,KAAKjB,MAAML,SACtBC,YAAcqB,KAAKjB,MAAMJ,YACzBC,MAAQoB,KAAKjB,MAAMH,iB,GAjDbqB,aAyDHnB,IClDAoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.976dcb5f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Form = (props) => {\r\n    return (\r\n        <form onSubmit={props.gitWeather}>\r\n            <input type=\"text\" name=\"country\" placeholder=\"Country...\" />\r\n            <input type=\"text\" name=\"city\" placeholder=\"City...\" />\r\n            <button>Git Weather</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nconst Weather = (props) => {\r\n    return (\r\n        <div className=\"info\">\r\n            {props.city && <p>Location: {props.city}, {props.country}</p>}\r\n            {props.temperature && <p>Temperature: {props.temperature}K</p>}\r\n            {props.humidity && <p>Humidity: {props.humidity}%</p>}\r\n            {props.description && <p>Description: {props.description}</p>}\r\n            {props.error && <p>Error: {props.error}</p>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Weather;\r\n","import React, {Component} from \"react\";\nimport Form from \"./components/form\";\nimport Weather from \"./components/weather\";\n\nconst API_KEY = \"e36ed364400282e43250b6c4c0274d44\";\nclass App extends Component {\n  \n  state = {\n    country: \"\",\n    city: \"\",\n    temperature: \"\",\n    humidity: \"\",\n    description: \"\",\n    error: \"\",\n  };\n  \n  gw = async (e) => {\n    e.preventDefault();\n    const country = e.target.elements.country.value;\n    const city = e.target.elements.city.value;\n    const api = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}%2C${country}&appid=${API_KEY}`);\n    const api_data = await api.json();\n    if (city && country) {\n      this.setState({\n        country: api_data.sys.country,\n        city: api_data.name,\n        temperature: api_data.main.temp,\n        humidity: api_data.main.humidity,\n        description: api_data.weather[0].description,\n        error: \"\",\n      });\n    } else {\n      this.setState({\n        country: \"\",\n        city: \"\",\n        temperature: \"\",\n        humidity: \"\",\n        description: \"\",\n        error: \"Please enter correct inputs!\",\n      });\n    }\n  };\n  \n  render() {\n    return (\n      <div className=\"App\">\n      <div className=\"container\">\n          <Form gitWeather={this.gw}/>\n          <Weather\n            country= {this.state.country}\n            city= {this.state.city}\n            temperature= {this.state.temperature}\n            humidity= {this.state.humidity}\n            description= {this.state.description}\n            error= {this.state.error}\n          />\n        </div>\n      </div>\n    );\n  };\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}